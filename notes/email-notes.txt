Hi Jihoon.

Thanks again for offering to help me with my Korean studies and projects.  As you probably noticed at the meetup on
Saturday, I had a list of questions I keep adding to as I progress in my studies, so perhaps you can help answering some
of these.  I'm also working on that Korean language sentence parser and would welcome help understanding the parts of
speech that the underlying parser generates, so maybe I could ask you questions about that as well.

The question list I have is in a Google doc here, enabled for editing, if you want to add comments directly into that
doc.  We could chat over skype while going over that, which might be a good way to do it.

I put the Korean sentence parser, such as it is so far, on a server here.   That page is basically a front-end to a
Korean sentence parsing kit I found called KoNLPy, described here - http://konlpy.org/en/latest/.  The kit is
Python-based and a little awkward to use, so I built the simple web front-end to make it easier to use.  The KoNLPy
framework itself wraps a set of 4 or 5 3rd-party parsers, listed in the docs.  The app I have running now is using the
Kormoran parser, but I plan on making that selectable.

The back-end parsers themselves only separate the sentence into a list of words tagged with their parts-of-speech, using
codes listed in a reference spreadsheet.  These are the codes below each word in the graph.  I found another tool in
NTLK  a Python-based natural-language parsing library, that let's me specify phrase patterns and generates the phrase
structures you see in the current output.

I am gradually adding to the phrase-pattern grammar, based on patterns in sources like this, and it would be good to be
able to ask your to help understand some of these and any ambiguities I find.

I see you are also a member of the San Jose Astronomy meetup, as am I!  What's your particular interest in astronomy?  
I do astrophotography, some of my images are here.

Anyway, thanks again for offering to help.  Perhaps we could grab a coffee or meal (Korean of course) sometime, to
follow up on some of the above.

Regards, John.

-----------------

Hi Philjae.  Thanks again for offering to help with Korean learning, you are very kind and your help is much
appreciated.  I had prepared some notes on the Korean language parsing app I showed you and Song, but got very
distracted on a week-ling business trip and didn't send it along, sorry.   Anyway, take a look at the notes below and
perhaps we can talk about it at the next meetup.   I am again going to be off on a business trip this week, but will
check for any email in case you have comments or questions before we next meet.

Thanks again, John.



The small web-app I was showing at the meetup is a front-end to a Korean sentence parsing kit I found called KoNLPy,
described here - http://konlpy.org/en/latest/.  The kit is Python-based and a little awkward to use, so I built a simple
web front-end based on Vue js and Flask and have it running here:
http://ec2-52-34-61-205.us-west-2.compute.amazonaws.com/analyzer.

I was looking for a parser to help me understand the syntax of Korean sentences, and this parser kit does seem to help,
though it isn't fully configured yet, as I'll explain.  The app I built lets you key in a sentence in Korean and hit the
'parse' button. It should draw a parse tree after a second or so.  The codes in parentheses after each word are
part-of-speech tags generated by the back-end parser, explained below.  Click on a word to bring up an embedded iframe
containing a search for that word on Wiktionary (which has entries for particles and endings and other parts of speech,
as well as whole words.)

In it's current form, the displayed tree is a *very* crude approximation to phrase structures in Korean; that's one of
the things I want to improve, and perhaps Yoo Jin or you can help with that.  More on that below.

Song asked to see the source, so I put it on github here - https://github.com/johnw3d/Korean-language-parser, in case
you are interested. I need to update the README to explain dev setup and build instructions, will do so soon.

The app is pretty simple really, just a UI that wraps the KoNLPy framework.  Vue is pretty cool for rendering SVG, so it
wasn't hard to knock up the graphics.  The KoNLPy framework itself wraps a set of 4 or 5 3rd-party parsers, listed in
the docs.  The app I have up on AWS is using the Kkma parser, but I plan on making that selectable.  I've only just
started playing with them and not sure which is the best.

The parsers themselves only separate the sentence into a list of words tagged with their parts-of-speech, using codes
listed in the spreadsheet I showed you -
https://docs.google.com/spreadsheets/d/1OGAjUvalBuX-oZvZ_-9tEfYD2gQe7hTGsgUpiiBSXI8/edit#gid=0.  These are the codes in
parentheses after each word in the graph.  The parse tree is generated using the chunking parser in NLTK, a popular NLP
Python library.  You give it a set of regular-expressions defining phrase syntax in terms of part-of-speech tag
patterns, as described here: http://www.nltk.org/book/ch07.html - section 2 - chunking grammars.

The phrase grammar I have in place now is very crude, and I don't know if it will be easy to define part-of-speech
patterns for Korean phrases

-------------------


Hi Philjae.  Yes, by 'parts of speech', I do mean things like noun (명사), verb (동사), and so on, as you say.   The parser
does indeed assign the parts-of-speech labels, like NN for 명사, and VV for 동사, and so on.  All the parts that the Kkma
parser can assign are listed in columns K, L and M in that spreadsheet.   As you can see, it has a nested breakdown of
those tags going from columns K to M.

What I was particularly interested in was defining patterns of those individual parts of speech that correspond to
common phrases in Korean, such as noun phrases, verb phrases, adjectival phrases, and so on, to the extent they are
well-defined in Korean.  These patterns are not provided by the part-of-speech parsing engines, but are used in my app
with NLTK to draw the parse tree of the phrases in a sentence.

In the current code, I’ve defined a noun phrase as the tag pattern N.*J.*, that is, any tag starting with N followed by
any tag starting with J, which I think is any noun-like part-of-speech followed by a particle, though I'm not entirely
certain of this.   I think I'm looking for help understanding the various parts of speech listed K, L & M columns and
described in column N, and then to build patterns for common phrase constructs in Korean.

One way to do this might be to just parse a range of different sentences, see what parts of speech the parser assigns,
and then decide if there are any phrases and make patterns for them, that's more-or-less how I got the N.*J.* pattern.

Anyway, although this is an interesting project, it is low priority, and just adds to the many ways I have to study
Korean already!!  Any help or guidance if you find time is much appreciated.

Thanks again, John.

